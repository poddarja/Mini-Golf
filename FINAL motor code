#include <Arduino.h>
#include <stdint.h>
#include "SCMD.h"
#include "SCMD_config.h" //Contains #defines for common SCMD register names and values
#include "Wire.h"

SCMD myMotorDriver; //This creates the main object of one motor driver and connected peripherals.

void setup()
{
  pinMode(8, INPUT_PULLUP); //Use to halt motor movement (ground)

  Serial.begin(9600);
  Serial.println("Starting sketch.");

  //***** Configure the Motor Driver's Settings *****//
  //  .commInterface is I2C_MODE 
  myMotorDriver.settings.commInterface = I2C_MODE;

  //  set address if I2C configuration selected with the config jumpers
  myMotorDriver.settings.I2CAddress = 0x5D; //config pattern is "1000" (default) on board for address 0x5D

  //  set chip select if SPI selected with the config jumpers
  myMotorDriver.settings.chipSelectPin = 10;

  //*****initialize the driver get wait for idle*****//
  while ( myMotorDriver.begin() != 0xA9 ) //Wait until a valid ID word is returned
  {
    Serial.println( "ID mismatch, trying again" );
    delay(500);
  }
  Serial.println( "ID matches 0xA9" );

  //  Check to make sure the driver is done looking for peripherals before beginning
  Serial.print("Waiting for enumeration...");
  while ( myMotorDriver.ready() == false );
  Serial.println("Done.");
  Serial.println();

  //*****Set application settings and enable driver*****//

  //Uncomment code for motor 0 inversion
  //while( myMotorDriver.busy() );
  //myMotorDriver.inversionMode(0, 1); //invert motor 0

  //Uncomment code for motor 1 inversion
  while ( myMotorDriver.busy() ); //Waits until the SCMD is available.
  myMotorDriver.inversionMode(1, 1); //invert motor 1

  while ( myMotorDriver.busy() );
  myMotorDriver.enable(); //Enables the output driver hardware
}

#define MUSHROOM_MOTOR 0 //A MOTOR
#define GNOME_MOTOR 1 //B MOTOR 

void loop()
{
  // Set mushroom motor to spin constantly at a slow speed
  myMotorDriver.setDrive( MUSHROOM_MOTOR, 0, 50); // Adjust speed as needed

  // Move gnome motor forward for a few seconds
  moveGnome(60, 8000); // 20% speed for 2000 milliseconds (2 seconds)

  // Move gnome motor backward for a few seconds
  moveGnome(-60, 8000); // -20% speed for 2000 milliseconds (2 seconds)
}

// Function to move the gnome motor with specified speed and duration
void moveGnome(int speed, int duration)
{
  // Set gnome motor direction based on the sign of 'speed'
  int direction = (speed > 0) ? 0 : 1; // 0 for forward, 1 for backward

  // Stop the gnome motor
  myMotorDriver.setDrive(GNOME_MOTOR, direction, abs(speed)); // direction first, then speed

  // Delay for the specified duration
  delay(duration);

  // Stop the gnome motor
  myMotorDriver.setDrive(GNOME_MOTOR, 0, 0); // direction first, then speed
}

